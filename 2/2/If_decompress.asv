clear all
close all

%% Task 1. Initialization and Acquisition of the Point Cloud

filename = 'loot_vox10_1001.ply'
URL = 'http://www.cs.tut.fi/~tabus/course/AdvSP/loot_vox10_1001.ply'
A = urlread(URL);%read the picture from the url
fid = fopen(filename,'w') %open the file with the name in the filename variable
fwrite(fid,A,'char'); %write the piture as 'char' type into the file
fclose(fid); %close the file
    
ptCloud = pcread(filename); % read the file as the point cloud
figure(1),PC1_img = pcshow(ptCloud); % show the image with ptcloud  

%% Task 1a. Orientation and Manipulation of the Point Cloud

% Use the figure toolbar (open it from Figure 1 Menu --> View --> Figure Toolbar, if it's not open already)

% Pick the Rotate 3D button and rotate as much as you think is necessary to

% understand the structure of the point cloud
% answer: Three planes(xy,yz,zx): xy: [0 400][0 1000], yz: [0 1000][100 500],
% zx: [0 400][100 500]


% Extract the 3 major projections (Front, Top and 1 Side Projection of your
% choice [L/R]), show them, save them to your hard drive and include them
% in the report.

PC1_img.View = [0 90]; %First Projection (Front)
PC1_img.View = [0 180]; %Second Projection (Top)
PC1_img.View = [90 0]; %Third Projection (Right)

%Inspect the structure of the point cloud and then, subsequentially, save
%the geometry and the colors in 2 indipendent variables:
BB = ptCloud.Location(:,1:3); %Geometry
CC = ptCloud.Color(:,1:3);%Color

%% Task 2 Extract the Assigned Projection

% If your Student Number's last digit is odd --> Left/Right Projection (272486)
% If your Student Number's last digit is even --> Top/Bottom Projection

% For both cases you also have to display them and save them to your hard drive and
% include them in the report.

% Example for the extraction of the front/back projection
FP_BB1 = BB(:,1);%x
FP_BB2 = BB(:,2);%y
FP_BB3 = BB(:,3);%z
%on the xz plane
MaskFP_1 = zeros(length(FP_BB1),3);
MaskFP_2 = zeros(length(FP_BB1),3);
MaskFP_3 = zeros(length(FP_BB1),3);
%caompute the FP_ImRepMax, FP_ImRepMin, FP_ImRepCell, 


FP_ImColForgr = zeros(max(FP_BB2(:)),max(FP_BB1(:)),3);
FP_ImColBackgr
FP_ImRepMax = zeros(max(FP_BB2(:)),max(FP_BB1(:)));
FP_ImRepMin = 10^10*ones(max(FP_BB2(:)),max(FP_BB1(:)));
FP_ImRepCell = cell(max(FP_BB2(:)),max(FP_BB1(:)));
FP_ImRepCard = zeros(max(FP_BB2(:)),max(FP_BB1(:)));
FP_ImColForgr = zeros(max(FP_BB2(:)),max(FP_BB1(:)),3);
FP_ImColBackgr = zeros(max(FP_BB2(:)),max(FP_BB1(:)),3);
for i4 = 1:length(FP_BB1)
    if( FP_ImRepMax( FP_BB2(i4),FP_BB1(i4) ) < FP_BB3(i4) )
        FP_ImRepMax( FP_BB2(i4),FP_BB1(i4) ) = FP_BB3(i4);
        FP_ImColForgr( FP_BB2(i4),FP_BB1(i4),1:3) = CC(i4,:);
    end
    if( FP_ImRepMin( FP_BB2(i4),FP_BB1(i4) ) > FP_BB3(i4) )
        FP_ImRepMin( FP_BB2(i4),FP_BB1(i4) ) = FP_BB3(i4);
        FP_ImColBackgr( FP_BB2(i4),FP_BB1(i4),1:3) = CC(i4,:);
    end   
    FP_ImRepCell{FP_BB2(i4),FP_BB1(i4)} = [FP_ImRepCell{FP_BB2(i4),FP_BB1(i4)} FP_BB3(i4)];
    FP_ImRepCard(FP_BB2(i4),FP_BB1(i4)) = length( FP_ImRepCell{FP_BB2(i4),FP_BB1(i4)} );
end
% Mark the used points
for i4 = 1:length(FP_BB1)
    if( FP_ImRepMax( FP_BB2(i4),FP_BB1(i4) ) == FP_BB3(i4) )
        MaskFP_1(i4) = 1;
    end
     if( FP_ImRepMin( FP_BB2(i4),FP_BB1(i4) ) ==  FP_BB3(i4) )
        MaskFP_1(i4) = 2;
     end   
end


FP_ImRepCard = FP_ImRepCard(end:-1:1,:);
FP_ImRepMax= FP_ImRepMax(end:-1:1,:); 
FP_ImRepMin = FP_ImRepMin(end:-1:1,:); FP_ImRepMin( FP_ImRepMin == 10^10) = 0;
FP_ImColForgr = FP_ImColForgr(end:-1:1,:,:);
FP_ImColBackgr = FP_ImColBackgr(end:-1:1,:,:);

% Saving and Displaying Images

U8ver_FP_ImColForgr = uint8(FP_ImColForgr); 
U8ver_FP_ImColBackgr = uint8(FP_ImColBackgr);  

figure(14), imagesc(FP_ImRepMax), colormap(gray), axis equal
figure(15), imagesc(FP_ImRepMin), colormap(gray), axis equal
figure(18), imshow(U8ver_FP_ImColForgr), colormap(gray)
figure(19), imshow(U8ver_FP_ImColBackgr), colormap(gray)

vv = [sum(FP_ImRepMax(:)>0) sum(FP_ImRepMin(:)>0)  sum(FP_ImRepMax(:)>0)+sum(FP_ImRepMin(:)>0)  length(FP_BB1)];

imwrite(U8ver_FP_ImColForgr, 'U8ver_FP_ImColForgr.png');
imwrite(U8ver_FP_ImColBackgr, 'U8ver_FP_ImColBackgr.png');

% Implementation for the extraction of the front/back projection

FP_BB1 = BB(:,1);
FP_BB2 = BB(:,2);
FP_BB3 = BB(:,3);

MaskFP_1 = zeros(length(FP_BB1),1);
MaskFP_2 = zeros(length(FP_BB1),1);
MaskFP_3 = zeros(length(FP_BB1),1);

FP_ImRepMax = zeros(max(FP_BB1(:)),max(FP_BB3(:)));
FP_ImRepMin = 10^10*ones(max(FP_BB1(:)),max(FP_BB3(:)));
FP_ImRepCell = cell(max(FP_BB1(:)),max(FP_BB3(:)));
FP_ImRepCard = zeros(max(FP_BB1(:)),max(FP_BB3(:)));
FP_ImColTopr = zeros(max(FP_BB1(:)),max(FP_BB3(:)),3);
FP_ImColBotgr = zeros(max(FP_BB1(:)),max(FP_BB3(:)),3);
for i4 = 1:length(FP_BB1)
    if( FP_ImRepMax( FP_BB1(i4),FP_BB3(i4) ) < FP_BB2(i4) )
        FP_ImRepMax( FP_BB1(i4),FP_BB3(i4) ) = FP_BB2(i4);
        FP_ImColTopgr( FP_BB1(i4),FP_BB3(i4),1:3) = CC(i4,:);
    end
    if( FP_ImRepMin( FP_BB1(i4),FP_BB3(i4) ) > FP_BB2(i4) )
        FP_ImRepMin( FP_BB1(i4),FP_BB3(i4) ) = FP_BB2(i4);
        FP_ImColBotgr( FP_BB1(i4),FP_BB3(i4),1:3) = CC(i4,:);
    end   
    FP_ImRepCell{FP_BB1(i4),FP_BB3(i4)} = [FP_ImRepCell{FP_BB1(i4),FP_BB3(i4)} FP_BB2(i4)];
    FP_ImRepCard(FP_BB1(i4),FP_BB3(i4)) = length( FP_ImRepCell{FP_BB1(i4),FP_BB3(i4)} );
end
% Mark the used points
for i4 = 1:length(FP_BB3)
    if( FP_ImRepMax( FP_BB1(i4),FP_BB3(i4) ) == FP_BB2(i4) )
        MaskFP_3(i4) = 1;
    end
     if( FP_ImRepMin( FP_BB1(i4),FP_BB3(i4) ) ==  FP_BB2(i4) )
        MaskFP_3(i4) = 3;
     end   
end


FP_ImRepCard = FP_ImRepCard(end:-1:1,:);
FP_ImRepMax= FP_ImRepMax(end:-1:1,:); 
FP_ImRepMin = FP_ImRepMin(end:-1:1,:); FP_ImRepMin( FP_ImRepMin == 10^10) = 0;
FP_ImColTopgr = FP_ImColTopgr(end:-1:1,:,:);
FP_ImColBotgr = FP_ImColBotgr(end:-1:1,:,:);

% Saving and Displaying Images

U8ver_FP_ImColTopgr = uint8(FP_ImColTopgr); 
U8ver_FP_ImColBotgr = uint8(FP_ImColBotgr);  

figure(14), imagesc(FP_ImRepMax), colormap(gray), axis equal
figure(15), imagesc(FP_ImRepMin), colormap(gray), axis equal
figure(18), imshow(U8ver_FP_ImColForgr), colormap(gray)
figure(19), imshow(U8ver_FP_ImColBackgr), colormap(gray)

vv = [sum(FP_ImRepMax(:)>0) sum(FP_ImRepMin(:)>0)  sum(FP_ImRepMax(:)>0)+sum(FP_ImRepMin(:)>0)  length(FP_BB1)];

imwrite(U8ver_FP_ImColTopgr, 'U8ver_FP_ImColForgr.png');
imwrite(U8ver_FP_ImColBotgr, 'U8ver_FP_ImColBackgr.png');

%At the end of this taks, you'll need to work with only one projection until the end of the assignment:

% Top/Bottom has to work with only the Top Projection
% Left/Right has to work with only the Left Projection


%%  Task 3. Conversion in Grayscale 
% Save the Depth Image (ImRepMax) to a separate variable, display it and
% convert the acquired color image RGB into a grayscale matrix. Denote the new matrix A.

%Implementation for Front Projection (Change for your assigned Projection)

Depth = FP_ImRepMax;
figure(31), imagesc(Depth), colormap (gray), axis equal,title('Depth Image to be Processed in Data Compression Section')

Acolor = U8ver_FP_ImColTopgr;

A = rgb2gray(Acolor);
figure(32),imagesc(A), colormap (gray), axis equal,title('Grayscale Image to be Processed in Data Compression Section')

%% STEP 2
%Image
hist1 = hist(A(:), 0:255);

figure(70), plot(hist1)
figure(71), semilogy(hist1)
figure(72), plot(hist1(2:end))

%Depth
hist2 = hist(Depth(:), 0:255);

figure(80), plot(hist2)
figure(81), semilogy(hist2)
figure(82), plot(hist2(2:end))

